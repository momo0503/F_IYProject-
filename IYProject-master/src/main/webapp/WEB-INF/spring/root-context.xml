<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- xml주석문기호 -->
	<aop:aspectj-autoproxy /><!-- aop자동 프록시 설정. 프록시는 사용자 요청을 받고 대리하여 업무를 처리하는 
		대리자 역할. aspectj는 aop에서 사용하는 문법을 말한다. -->
	<!-- 스프링 JDBC -->
	<!-- <bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="oracle.jdbc.OracleDriver" />driverClassName 멤버변수 에 value속성값을 
			저장
		<property name="url"
			value="jdbc:oracle:thin:@127.0.0.1:1521:xe" />
		오라클 접속주소, 1521은 포트번호,xe는 디비명
		<property name="username" value="hyeah303" />오라클 접속사용자
		<property name="password" value="lifetheater" />비번
	</bean>bean이 자바 클래스 단위. id명인 dataSource는 자바언어에서 객체명에 해당됨. -->
	
		<!-- Root Context: defines shared resources visible to all other web components -->
	
		<!-- 히카리 커넥션풀 빈 등록 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName"
			value="oracle.jdbc.OracleDriver" />
		<property name="jdbcUrl"
			value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="week" />
		<property name="password" value="week" />
	</bean>

	<!-- 데이터 소스 객체 빈 등록 -->
	<bean id="ds" class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref="hikariConfig" />
	</bean>

	<!-- spring jdbc와 mybatis를 연결,mybatis환경설정과 매퍼태그 설정 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds" />
		<!-- 스프링의 setter()메서드를 통한 의존성 주입. 그러면 dataSource 변수에 ref 빈아이디 dataSource를 
			호출해서 사용되게 함. -->
		<property name="configLocation"
			value="classpath:/mybatis-config.xml" />
		<!-- mybatis-config.xml파일의 역할을 데이터 저장빈 클래스 객체 별칭을 관리. classpath경로는 이클립스 
			가상경로로 src/main/resources이고,실제 톰캣 경로로 /WEB-INF/classes경로를 뜻한다. -->
		<!-- mybatis 매퍼 xml태그로 쿼리문다루는 매퍼태그 위치지정 -->
		<property name="mapperLocations"
			value="classpath:com/lifetheater/mappers/*/*.xml" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds" />
	</bean>
	<tx:annotation-driven /><!-- @Transactional 를 이용한 트랜젝션 관리가 가능 -->

	<!-- mybatis쿼리문 수행객체를 설정 -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<!-- clearCache는 임시메모리를 깨끗이 지운다. 또다른 의미로 데이터 베이스 연결을 close() 해주는 역할을 한다. -->
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory" /><!-- 생성자를 통한 의존성 DI 설정. constructor는 생성자를 말함. -->
	</bean>

	<!-- Model *DAOImpl의 @Repository로 설정된 부분을 스프링에서 오토 스캔 하게 등록해 줌 -->
	<context:component-scan
		base-package="com.lifetheater.dao" />
	<context:component-scan
		base-package="com.lifetheater.kakao.dao" />
	<context:component-scan
		base-package="com.lifetheater.naver.dao" />

	<!-- 서비스 오토스캔 추가 섭시ㅡ(Service)의 역할: 1.컨트롤러와 모델 DAO를 연결하는 중간 매개체 역할 2.고객의 
		추가요구하상을 반영하는 서비스 3.스프링의 aop를 통한 트랜잭션을 적용함으로써 레코드 정확도 일관정 원자성의 원칙을 지켜서 사이트의 
		신뢰도를 가져온다. ->자료의 불일치성을 완전히 제거한다. -->
	<context:component-scan
		base-package="com.lifetheater.service" />
	<context:component-scan
		base-package="com.lifetheater.kakao.service" />
	<context:component-scan
		base-package="com.lifetheater.naver.service" />

<!--   Gmail	-->
	<bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="h31531256@gmail.com" />
		<property name="password" value="sksdign!31792" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>  
		<!-- 회원가입 메일 인증 -->
<!-- 	<beans:bean id="mailSender"	class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.gmail.com" />
		<beans:property name="port" value="587" />465 or 25
		<beans:property name="username" value=" h31531256@gmail.com" />
		<beans:property name="password" value="sksdign!357" />
		<beans:property name="defaultEncoding" value="utf-8" />
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
				<beans:prop key="mail.debug">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean> -->
	
	<!-- AOP를 mxl방식으로 설정 -->
	<aop:config />
</beans>
